{
  "Comment": "State machine for webhok management service",
  "StartAt": "GetWebhooksForCompanyAndEvent",
  "States": {
    "GetWebhooksForCompanyAndEvent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${DynamoDBTableName}",
        "Key": {
          "pk": {
            "S.$": "States.Format('webhook_{}_{}', $.companyId, $.webhookEvent)"
          },
          "type": {
            "S": "webhook"
          }
        }
      },
      "Next": "IfWebhookDataExists",
      "ResultPath": "$.webhookData"
    },
    "IfWebhookDataExists": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.webhookData.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.webhookData.Item.pk.S",
              "IsPresent": true
            },
            {
              "Variable": "$.webhookData.Item.signedToken.S",
              "IsPresent": true
            },
            {
              "Variable": "$.webhookData.Item.url.S",
              "IsPresent": true
            }
          ],
          "Next": "TransformWebhookData"
        }
      ],
      "Default": "SkipExecution"
    },
    "TransformWebhookData": {
      "Type": "Pass",
      "Next": "Fetch Resource Data Lambda",
      "Parameters": {
        "webhookId.$": "$.webhookData.Item.pk.S",
        "webhookSignToken.$": "$.webhookData.Item.signedToken.S",
        "webhookUrl.$": "$.webhookData.Item.url.S",
        "companyId.$": "$.companyId",
        "resourceType.$": "$.resourceType",
        "resourceId.$": "$.resourceId"
      }
    },
    "Fetch Resource Data Lambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${FetchResourceFunctionName}",
        "Payload": {
          "key.$": "$.resourceId",
          "type.$": "$.resourceType"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "IfEventObjectDataExists",
      "ResultPath": "$.taskResult",
      "ResultSelector": {
        "resourceData.$": "$.Payload"
      }
    },
    "IfEventObjectDataExists": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.taskResult.resourceData",
            "IsNull": true
          },
          "Next": "createWebhookCall"
        }
      ],
      "Default": "Fail"
    },
    "createWebhookCall": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateWebhookCallFunctionName}"
      },
      "Next": "SQS SendMessage",
      "ResultPath": "$.webhookCallData",
      "ResultSelector": {
        "id.$": "$.Payload.id",
        "payload.$": "$.Payload.payload"
      }
    },
    "SQS SendMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "Parameters": {
        "QueueUrl": "${SQSQueueUrl}",
        "MessageBody": {
          "url.$": "$.webhookUrl",
          "webhookCallId.$": "$.webhookCallData.id",
          "signingToken.$": "$.webhookSignToken",
          "payload.$": "$.webhookCallData.payload",
          "taskToken.$": "$$.Task.Token"
        }
      },
      "HeartbeatSeconds": 3600,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 60,
          "MaxAttempts": 2
        }
      ],
      "Next": "DynamoDB Update WebhookCall",
      "ResultPath": "$.webhookCallResult",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "TransformError",
          "ResultPath": "$.webhookCallResult"
        }
      ]
    },
    "TransformError": {
      "Type": "Pass",
      "Next": "DynamoDB Update WebhookCall",
      "ResultPath": "$.webhookCallResult",
      "Parameters": {
        "status": "failed",
        "payload": "",
        "output": {
          "Error.$": "$.webhookCallResult.Error",
          "Cause.$": "$.webhookCallResult.Cause"
        }
      }
    },
    "DynamoDB Update WebhookCall": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${DynamoDBTableName}",
        "Key": {
          "pk": {
            "S.$": "$.webhookCallData.id"
          },
          "type": {
            "S": "webhookcall"
          }
        },
        "UpdateExpression": "SET #status = :status, #output = :output",
        "ExpressionAttributeValues": {
          ":status": {
            "S.$": "$.webhookCallResult.status"
          },
          ":output": {
            "S.$": "States.JsonToString($.webhookCallResult.output)"
          }
        },
        "ExpressionAttributeNames": {
          "#status": "status",
          "#output": "output"
        }
      },
      "End": true
    },
    "Fail": {
      "Type": "Fail",
      "Error": "dataNotFound",
      "Cause": "Required resource data not exists in dynamodb"
    },
    "SkipExecution": {
      "Type": "Pass",
      "End": true,
      "Comment": "Webhook not configured for this event"
    }
  }
}